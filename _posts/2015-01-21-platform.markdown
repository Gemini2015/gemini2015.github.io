---
layout: post
title: 平台独立层
date: 2015-01-21 10:47:02
categories: Game
description: 平台独立层的结构与实现
---


一个良好的跨平台游戏引擎必须实现平台解耦，通过实现平台抽象层，将游戏引擎与具体平台隔离。


## 平台检测
个人认为平台检测主要是**通过系统宏定义进行预处理**。
如在Windows平台常见的`WIN32、_WIN32、__WIN32__`。常用下面的方法来区分与平台相关的代码。

```
// platform.h
#if defined(WIN32)

// Win32 Platform
#include "Win32Window.h"
#include "Win32FileSystem.h"
#include "Win32Timer.h"

#elif defined(__linux)

// Linux Platform

#elif defined(__MACOSX__)

// Mac OS X

#endif
```
项目构建工具也有**区分平台**的功能，如CMake本身也定义了一些宏用于表明当前要构建的平台。
从Qt的宏定义文件中，我们可以得到一些平台的系统宏定义。

```
#ifndef QGLOBAL_H
#define QGLOBAL_H

/*
   The operating system, must be one of: (Q_OS_x)

     MACX	- Mac OS X
     MAC9	- Mac OS 9
     MSDOS	- MS-DOS and Windows
     OS2	- OS/2
     OS2EMX	- XFree86 on OS/2 (not PM)
     WIN32	- Win32 (Windows 95/98/ME and Windows NT/2000/XP)
     CYGWIN	- Cygwin
     SOLARIS	- Sun Solaris
     HPUX	- HP-UX
     ULTRIX	- DEC Ultrix
     LINUX	- Linux
     FREEBSD	- FreeBSD
     NETBSD	- NetBSD
     OPENBSD	- OpenBSD
     BSDI	- BSD/OS
     IRIX	- SGI Irix
     OSF	- HP Tru64 UNIX
     SCO	- SCO OpenServer 5
     UNIXWARE	- UnixWare 7, Open UNIX 8
     AIX	- AIX
     HURD	- GNU Hurd
     DGUX	- DG/UX
     RELIANT	- Reliant UNIX
     DYNIX	- DYNIX/ptx
     QNX	- QNX
     QNX6	- QNX RTP 6.1
     LYNX	- LynxOS
     BSD4	- Any BSD 4.4 system
     UNIX	- Any UNIX BSD/SYSV system
*/

#if defined(__APPLE__) && defined(__GNUC__)
#  define Q_OS_MACX
#elif defined(__MACOSX__)
#  define Q_OS_MACX
#elif defined(macintosh)
#  define Q_OS_MAC9
#elif defined(__CYGWIN__)
#  define Q_OS_CYGWIN
#elif defined(MSDOS) || defined(_MSDOS)
#  define Q_OS_MSDOS
#elif defined(__OS2__)
#  if defined(__EMX__)
#    define Q_OS_OS2EMX
#  else
#    define Q_OS_OS2
#  endif
#elif !defined(SAG_COM) && (defined(WIN64) || defined(_WIN64) || defined(__WIN64__))
#  define Q_OS_WIN32
#  define Q_OS_WIN64
#elif !defined(SAG_COM) && (defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__))
#  define Q_OS_WIN32
#elif defined(__MWERKS__) && defined(__INTEL__)
#  define Q_OS_WIN32
#elif defined(__sun) || defined(sun)
#  define Q_OS_SOLARIS
#elif defined(hpux) || defined(__hpux)
#  define Q_OS_HPUX
#elif defined(__ultrix) || defined(ultrix)
#  define Q_OS_ULTRIX
#elif defined(sinix)
#  define Q_OS_RELIANT
#elif defined(__linux__) || defined(__linux)
#  define Q_OS_LINUX
#elif defined(__FreeBSD__)
#  define Q_OS_FREEBSD
#  define Q_OS_BSD4
#elif defined(__NetBSD__)
#  define Q_OS_NETBSD
#  define Q_OS_BSD4
#elif defined(__OpenBSD__)
#  define Q_OS_OPENBSD
#  define Q_OS_BSD4
#elif defined(__bsdi__)
#  define Q_OS_BSDI
#  define Q_OS_BSD4
#elif defined(__sgi)
#  define Q_OS_IRIX
#elif defined(__osf__)
#  define Q_OS_OSF
#elif defined(_AIX)
#  define Q_OS_AIX
#elif defined(__Lynx__)
#  define Q_OS_LYNX
#elif defined(__GNU_HURD__)
#  define Q_OS_HURD
#elif defined(__DGUX__)
#  define Q_OS_DGUX
#elif defined(__QNXNTO__)
#  define Q_OS_QNX6
#elif defined(__QNX__)
#  define Q_OS_QNX
#elif defined(_SEQUENT_)
#  define Q_OS_DYNIX
#elif defined(_SCO_DS)                   /* SCO OpenServer 5 + GCC */
#  define Q_OS_SCO
#elif defined(__USLC__)                  /* all SCO platforms + UDK or OUDK */
#  define Q_OS_UNIXWARE
#  define Q_OS_UNIXWARE7
#elif defined(__svr4__) && defined(i386) /* Open UNIX 8 + GCC */
#  define Q_OS_UNIXWARE
#  define Q_OS_UNIXWARE7
#else
#  error "Qt has not been ported to this OS - talk to qt-bugs@trolltech.com"
#endif

#if defined(Q_OS_MAC9) || defined(Q_OS_MACX)
#  define Q_OS_MAC
#endif

#if defined(Q_OS_MAC9) || defined(Q_OS_MSDOS) || defined(Q_OS_OS2) || defined(Q_OS_WIN32) || defined(Q_OS_WIN64)
#  undef Q_OS_UNIX
#elif !defined(Q_OS_UNIX)
#  define Q_OS_UNIX
#endif
```


## 高分辨率时钟
时钟作为一个游戏引擎最基本的模块，在很多方面都会使用到，如FPS统计，游戏时间线，物理系统等。
时钟模块的主要作用是**获取当前时间**。
C语言的`time.h`库提供了一些基本的时间获取函数，如下。

```
// 从 1970-01-01 00:00:00 GMT 以来消逝的秒数
time_t seconds = time(NULL);

// 获取时分秒结构
struct tm* Current = localtime(&seconds);

// 从程序启动到 clock() 调用，所消耗的CPU时间
clock_t ticks = clock();

// 转换成秒
long ElapsedSecond = ticks / CLOCKS_PER_SEC;
```
上面这些函数只能提供*秒级精度*，对于一些对时间要求不高程序，可以直接使用这些函数。
对游戏引擎而言，秒级精度是不够的，最少需要*毫秒级精度*。因此就需要使用到与平台相关的一些函数。

**Win32**

```
// 包含 windows.h 
static LARGE_INTEGER m_StartTime;
static LONGLONG m_LastTime;
static DWORD m_StartTick;

void init()
{
	QueryPerformanceFrequency(&m_StartTime);
	m_StartTick = GetTickCount();
	m_LastTime = 0;
}
// 参考 OGRE getMilliseconds， 获取毫秒
unsigned long getMilliseconds()
{
	LARGE_INTEGER frequency;
	QueryPerformanceFrequency(&frequency);

	LARGE_INTEGER endTime;
	QueryPerformanceCounter(&endTime);

	LONGLONG TimeOffset = endTime.QuadPart - m_StartTime.QuadPart;

	// 毫秒：* 1000， 微秒：* 1000000
	unsigned long Ticks = (unsigned long)(1000 * TimeOffset / frequency.QuadPart);

	unsigned long check = GetTickCount() - m_StartTick;
	signed long msecOff = (signed long)(Ticks - check);
	if (msecOff < -100 || msecOff > 100)
	{
		LONGLONG adjust = (std::min)(msecOff * frequency.QuadPart / 1000, TimeOffset - m_LastTime);
		m_StartTime.QuadPart += adjust;
		TimeOffset -= adjust;

		Ticks = (unsigned long)(1000 * TimeOffset / frequency.QuadPart);
	}
	
	m_LastTime = TimeOffset;

	return Ticks;
}
```
**Unix/Linux**

```
// 包含 sys/time.h
static timeval m_StartTime;

void init()
{
	gettimeofday(&m_StartTime, NULL);
}

unsigned long getMilliseconds()
{
	timeval endTime;
	gettimeofday(endTime, NULL);

	// timeval 由 tv_sec(秒)， tv_usec(微秒) 共同组成
	unsigned long elapsedTime = (endTime.tv_sec - m_StartTime.tv_sec) * 1000;
	elapsedTime += (endTime.tv_usec - m_StartTime.tv_usec) / 1000;

	return elapsedTime;
}
```