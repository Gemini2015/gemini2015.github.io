---
layout: post
title: 关于游戏设计
date: 2014-11-13 11:29:20
categories: Game
description: 涉及到游戏各方面的备忘录
---



建立一个备忘录，方便以后参考。



## 体验

#### 2D动作与动画
最近注意到2D游戏上的，有关动画的一个细节。2D游戏中，角色或NPC移动的最小单位一般为一个*格子*，角色或NPC的动作都由一组动画来表示，比如行走，施法，普通攻击。施法的时候一般角色本身不会有大范围的动作，主要是通过特效来表现魔法的效果。而普通攻击就不一样了，有些时候为了表现出稍微华丽一些的攻击动作，就不得不考虑增加***动作幅度***。

>一个格子由若干个像素组成，格子的形状不一定是矩形

比如角色手里拿一把刀，最基本的攻击动作就是站在原地挥一下刀，在这种情况下，人物的动作动画基本上不会超出当前格子。花哨一点，来个箭步，再挥刀，那么这个动作的动画就有可能会超出当前格子。若是攻击范围都为一（即只能攻击到周围一个格子以内的物体），当两个角色对砍的时候，这种情形势必会造成两个动画出现重叠的现象。对砍时，动画中挥出去的武器部分发生重叠似乎可以接受（或许也是一种合理的重叠），但是若是发生两个人身体主干的重叠，那么就有点影响视觉体验了。
一个简单的办法是为每一个动画设定一个实体范围，这个范围包裹了角色的主干，不允许出现重叠绘制，当屏幕上有多个角色要绘制动画时，根据触发时间上的先后顺序，对各个动画的播放位置进行抢占式的判定。比如A先触发，根据A的动画实体范围，标记一些格子，然后B再触发时，若是B的实体范围与A发生冲突，那么B需要进行偏移。
若是角色的攻击氛围允许在适当范围内的浮动的话，那么还可以采用另外一种办法。当A与B相邻时，只允许触发那些不会超过当前格子区域的动画（比如原地挥刀），当A与B中间隔了一个格子的时候，则自动触发攻击氛围为2的动画（比如箭步挥刀）。
记得《传奇》里面，战士的普通攻击动作只有一种，好像是原地蹲马步挥刀。当然，那个年代，玩《传奇》的人们，最关注的可能并不是画面……


#### 文字表述 - 生产者与用户
大部分时候，游戏开发者本身也是一个玩家。讨论游戏，是游戏设计过程中必不可少的一个步骤。同其他玩家一样，在讨论的过程中，一般都会为游戏里面的物品或元素约定一个简称，就拿《传奇》来说，记得好像补血的药品在游戏里是叫“金创药”吧，但是我们一般都称之为“红”（或者“红药”），同理，另一种称为“蓝”。这可以理解为`口语`与`书面语`的区别。一款游戏，应该是一个很正式的产品，尽管玩家都称这些为“红”或者“蓝”，但是游戏本身还是应该保留自己的特点。举个例子，在老一辈的网游界里，你一说“屠龙”，有几个人不会联想到《热血传奇》？

>时至今日，一说起“无极棍”，“骨玉”，“冰咆哮”，我的思绪都能回到那段沉浸在传奇游戏里的日子。

总之，一个游戏里面的一切设定，都应该当作一个特色来对待，正式的书面语能表明开发者对游戏的重视，反之，口语化的表述，会给玩家一种儿戏的错觉。至少在我看来，如果在游戏中，看到类似“红”，“蓝”这样的口语化表述，我很可能会觉得这是一款半成品的游戏。


## 关于游戏引擎设计与实现的流程的思考
在一步一步实现ZFXEngine的过程中，每次回过头来审视代码，想添加一些功能，总是会觉得相当麻烦，有的是工作量可能太大，有的则是会影响现有架构，总觉得一开始如果没有考虑到要加入这个功能的话，后面再想加入就会特别困难。
另一方面，如果一开始在设计引擎的时候，就想囊括所有最新的技术与最全的功能，我觉得也是不现实的，可能压根儿就没法实现。
因此，产生了这样的思考：**能不能在保证最佳扩展性的情况下，在引擎设计与实现的初期，忽略某些功能，或者说先放弃某些功能。**

### 耦合度
我觉得可以用耦合度来判断某个模块或功能是否必须在引擎设计与实现的初期就加以考虑。
对图形渲染接口的封装，可以作为一个例子。只要我们在设计初期，定义了良好的图形渲染接口，那么我们就可以不考虑具体图形接口的实现。我们可以在初期用OpenGL实现这个接口，当需要用D3D实现的时候，我们再用D3D实现也不迟，完全不会影响现有架构。
因此，我们可以总结出这样一个规律：**实现一组接口，基本上不会对原有架构造成影响**
图形渲染引擎，与游戏引擎有较高的耦合度，但是通过定义图形渲染接口，则可以实现解耦，因而就不用在游戏设计阶段苦恼于该选用OpenGL还是D3D。
对于*原子类型定义*，我们也可以视为一种解耦方法，通过`typedef`语句，使我们可以在一个地方控制所有的数据类型。
可以认为，**耦合度高的，需在初期阶段加以考虑，而耦合度较低的，则可以在初期忽略掉。**


### 初期决策
无论如何，有一些功能是在设计初期需要考虑取舍的。
就目前我的经验来说，有下列功能是需要考虑的。

- 国际化与本地化(I18n, L10n)
  **无论是否需要国际化，都应该尽量避免在游戏代码中，直接使用硬字符串。**对于需要国际化，而又不得不在源代码中使用硬字符串的软件，可以使用像`gettext`这样的函数库进行翻译。
  Linux/Unix下很容易安装`gettext`函数库，对于Windows环境，可以试试由[Michele Locati](https://github.com/mlocati)提供的[二进制版本](http://mlocati.github.io/gettext-iconv-windows/)。
